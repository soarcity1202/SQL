--How many orders were placed in January? Remember to filter out the blank and incorrect order IDs like we did in the "dealing with messy data" section of the previous lesson!
SELECT COUNT (orderID)
FROM BIT_DB.JanSales
WHERE LENGTH (orderID) = 6
AND orderID <> 'order ID'

--How many of those orders were for an iPhone?
SELECT COUNT (orderID)
FROM BIT_DB.JanSales
WHERE LENGTH (orderID) = 6
AND orderID <> 'order ID'
AND Product = 'iPhone'

--Select the customer account numbers for all the orders that were placed in February.
SELECT BIT_DB.customers.acctnum
 FROM BIT_DB.customers
 JOIN BIT_DB.FebSales
 ON BIT_DB.customers.order_id = BIT_DB.FebSales.orderID
 WHERE LENGTH (orderID) = 6
 AND orderID <> 'order ID'

--Which product was the cheapest one sold in January, and what was the price?
SELECT BIT_DB.JanSales.Product, BIT_DB.JanSales.price
FROM BIT_DB.JanSales
ORDER BY price ASC
LIMIT 1

--What is the total revenue for each product sold in January? (Revenue can be calculated using the number of products sold and the price of the products).
SELECT SUM(Quantity)*price AS revenue, Product
FROM BIT_DB.JanSales
GROUP BY Product

--Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?
SELECT SUM(Quantity), Product, SUM(Quantity)*price AS revenue
FROM BIT_DB.FebSales
WHERE location= '548 Lincoln St, Seattle, WA 98101'
GROUP BY Product

--How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?
SELECT COUNT (BIT_DB.customers.acctnum), AVG(Quantity*price)
FROM BIT_DB.FebSales
LEFT JOIN BIT_DB.customers
ON BIT_DB.customers.order_id = BIT_DB.FebSales.orderID
WHERE Quantity>2
AND LENGTH (orderID) = 6
AND orderID <> 'order ID'

--List all the products sold in Los Angeles in February, and include how many of each were sold.
SELECT SUM(Quantity), Product
FROM BIT_DB.FebSales
WHERE location LIKE '%Los Angeles%'
GROUP BY Product;
